buildscript {
    ext {
        springVersion = '1.5.10.RELEASE'
        springCloudVersion = '1.4.3.RELEASE'
    }

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springVersion}"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'nebula-aggregate-javadocs'

defaultTasks 'clean', 'build'

allprojects {
}

subprojects {
    apply plugin: 'java'

    group = 'ch.frostnova.spring-eureka-example'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
    }

    jar { duplicatesStrategy = 'exclude' }

    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

ext.libs = [
    jee               : "javax:javaee-api:7.0",
    testbase          : [
            "junit:junit:4.12",
            "org.mockito:mockito-core:2.15.0"
    ],
    springBoot        : [
            "org.springframework.boot:spring-boot-starter-jersey:${springVersion}",
            'javax.el:javax.el-api:2.2.4',
            'org.glassfish.web:javax.el:2.2.4'
    ],
    springBootActuator: [
            "org.springframework.boot:spring-boot-starter-actuator:${springVersion}",
            "org.springframework.boot:spring-boot-starter-web:${springVersion}"
    ],
    springBootTest    : [
            "org.springframework.boot:spring-boot-starter-test:${springVersion}"
    ],
    springEurekaServer: [
            "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:${springCloudVersion}"
    ],
    springEurekaClient: [
            "org.springframework.cloud:spring-cloud-starter-eureka:${springCloudVersion}"

    ],
    frostnova         : [
            check: "ch.frostnova:check:1.0.0-RC1"
    ]
]

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task startEureka(dependsOn: ':eureka-server:bootRun') {
    group = 'Start/Run'
    description = 'Start the Eureka server'
}

task startApplicationServer(dependsOn: ':application-server:bootRun') {
    group = 'Start/Run'
    description = 'Start the Application server'
}